{"version":3,"sources":["../../../client/components/socket/socket.service.js"],"names":[],"mappings":";AACA,YAAY,CAAC;;AAEb,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CACvB,OAAO,CAAC,QAAQ,EAAE,UAAS,aAAa,EAAE;;;AAGzC,MAAI,QAAQ,GAAG,EAAE,CAAC,EAAE,EAAE;;;AAGpB,QAAI,EAAE,mBAAmB;GAC1B,CAAC,CAAC;;AAEH,MAAI,MAAM,GAAG,aAAa,CAAC;AACzB,YAAQ,EAAE,QAAQ;GACnB,CAAC,CAAC;;AAEH,SAAO;AACL,UAAM,EAAE,MAAM;;;;;;;;;;;;AAYd,eAAW,EAAE,qBAAU,SAAS,EAAE,KAAK,EAAE,EAAE,EAAE;AAC3C,QAAE,GAAG,EAAE,IAAI,OAAO,CAAC,IAAI,CAAC;;;;;AAKxB,YAAM,CAAC,EAAE,CAAC,SAAS,GAAG,OAAO,EAAE,UAAU,IAAI,EAAE;AAC7C,YAAI,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,EAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC;AAC7C,YAAI,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACnC,YAAI,KAAK,GAAG,SAAS,CAAC;;;;AAItB,YAAI,OAAO,EAAE;AACX,eAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;AAC7B,eAAK,GAAG,SAAS,CAAC;SACnB,MAAM;AACL,eAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAClB;;AAED,UAAE,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;OACxB,CAAC,CAAC;;;;;AAKH,YAAM,CAAC,EAAE,CAAC,SAAS,GAAG,SAAS,EAAE,UAAU,IAAI,EAAE;AAC/C,YAAI,KAAK,GAAG,SAAS,CAAC;AACtB,SAAC,CAAC,MAAM,CAAC,KAAK,EAAE,EAAC,GAAG,EAAE,IAAI,CAAC,GAAG,EAAC,CAAC,CAAC;AACjC,UAAE,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;OACxB,CAAC,CAAC;KACJ;;;;;;;AAOD,iBAAa,EAAE,uBAAU,SAAS,EAAE;AAClC,YAAM,CAAC,kBAAkB,CAAC,SAAS,GAAG,OAAO,CAAC,CAAC;AAC/C,YAAM,CAAC,kBAAkB,CAAC,SAAS,GAAG,SAAS,CAAC,CAAC;KAClD;GACF,CAAC;CACH,CAAC,CAAC","file":"socket.service.js","sourcesContent":["/* global io */\r\n'use strict';\r\n\r\nangular.module('biyblApp')\r\n  .factory('socket', function(socketFactory) {\r\n\r\n    // socket.io now auto-configures its connection when we ommit a connection url\r\n    var ioSocket = io('', {\r\n      // Send auth token on connection, you will need to DI the Auth service above\r\n      // 'query': 'token=' + Auth.getToken()\r\n      path: '/socket.io-client'\r\n    });\r\n\r\n    var socket = socketFactory({\r\n      ioSocket: ioSocket\r\n    });\r\n\r\n    return {\r\n      socket: socket,\r\n\r\n      /**\r\n       * Register listeners to sync an array with updates on a model\r\n       *\r\n       * Takes the array we want to sync, the model name that socket updates are sent from,\r\n       * and an optional callback function after new items are updated.\r\n       *\r\n       * @param {String} modelName\r\n       * @param {Array} array\r\n       * @param {Function} cb\r\n       */\r\n      syncUpdates: function (modelName, array, cb) {\r\n        cb = cb || angular.noop;\r\n\r\n        /**\r\n         * Syncs item creation/updates on 'model:save'\r\n         */\r\n        socket.on(modelName + ':save', function (item) {\r\n          var oldItem = _.find(array, {_id: item._id});\r\n          var index = array.indexOf(oldItem);\r\n          var event = 'created';\r\n\r\n          // replace oldItem if it exists\r\n          // otherwise just add item to the collection\r\n          if (oldItem) {\r\n            array.splice(index, 1, item);\r\n            event = 'updated';\r\n          } else {\r\n            array.push(item);\r\n          }\r\n\r\n          cb(event, item, array);\r\n        });\r\n\r\n        /**\r\n         * Syncs removed items on 'model:remove'\r\n         */\r\n        socket.on(modelName + ':remove', function (item) {\r\n          var event = 'deleted';\r\n          _.remove(array, {_id: item._id});\r\n          cb(event, item, array);\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Removes listeners for a models updates on the socket\r\n       *\r\n       * @param modelName\r\n       */\r\n      unsyncUpdates: function (modelName) {\r\n        socket.removeAllListeners(modelName + ':save');\r\n        socket.removeAllListeners(modelName + ':remove');\r\n      }\r\n    };\r\n  });\r\n"]}