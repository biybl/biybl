{"version":3,"sources":["../../client/app/app.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE,CACzB,WAAW,EACX,YAAY,EACZ,YAAY,EACZ,SAAS,EACT,kBAAkB,EAClB,cAAc,CACf,CAAC,CACC,MAAM,CAAC,UAAU,cAAc,EAAE,iBAAiB,EAAE,aAAa,EAAE;AAClE,gBAAc,CACX,SAAS,CAAC;AACT,cAAU,EAAE,GAAG;GAChB,CAAC,CAAC;;AAEL,mBAAiB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AAClC,eAAa,CAAC,YAAY,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;CACpD,CAAC,CAED,OAAO,CAAC,iBAAiB,EAAE,UAAU,UAAU,EAAE,EAAE,EAAE,YAAY,EAAE,SAAS,EAAE;AAC7E,SAAO;;AAEL,WAAO,EAAE,iBAAU,MAAM,EAAE;AACzB,YAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC;AACtC,UAAI,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;AAC7B,cAAM,CAAC,OAAO,CAAC,aAAa,GAAG,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;OACtE;AACD,aAAO,MAAM,CAAC;KACf;;;AAGD,iBAAa,EAAE,uBAAS,QAAQ,EAAE;AAChC,UAAG,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;AAC1B,iBAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;AAEzB,oBAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAC7B,eAAO,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;OAC5B,MACI;AACH,eAAO,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;OAC5B;KACF;GACF,CAAC;CACH,CAAC,CAED,GAAG,CAAC,UAAU,UAAU,EAAE,SAAS,EAAE,IAAI,EAAE;;AAE1C,YAAU,CAAC,GAAG,CAAC,mBAAmB,EAAE,UAAU,KAAK,EAAE,IAAI,EAAE;AACzD,QAAI,CAAC,eAAe,CAAC,UAAS,QAAQ,EAAE;AACtC,UAAI,IAAI,CAAC,YAAY,IAAI,CAAC,QAAQ,EAAE;AAClC,aAAK,CAAC,cAAc,EAAE,CAAC;AACvB,iBAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;OAC1B;KACF,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ,CAAC,CAAC","file":"app.js","sourcesContent":["'use strict';\r\n\r\nangular.module('biyblApp', [\n  'ngCookies',\n  'ngResource',\n  'ngSanitize',\n  'ngRoute',\n  'btford.socket-io',\n  'ui.bootstrap'\n])\r\n  .config(function ($routeProvider, $locationProvider, $httpProvider) {\r\n    $routeProvider\r\n      .otherwise({\r\n        redirectTo: '/'\r\n      });\r\n\r\n    $locationProvider.html5Mode(true);\r\n    $httpProvider.interceptors.push('authInterceptor');\r\n  })\r\n\r\n  .factory('authInterceptor', function ($rootScope, $q, $cookieStore, $location) {\r\n    return {\r\n      // Add authorization token to headers\r\n      request: function (config) {\r\n        config.headers = config.headers || {};\r\n        if ($cookieStore.get('token')) {\r\n          config.headers.Authorization = 'Bearer ' + $cookieStore.get('token');\r\n        }\r\n        return config;\r\n      },\r\n\r\n      // Intercept 401s and redirect you to login\r\n      responseError: function(response) {\r\n        if(response.status === 401) {\r\n          $location.path('/login');\r\n          // remove any stale tokens\r\n          $cookieStore.remove('token');\r\n          return $q.reject(response);\r\n        }\r\n        else {\r\n          return $q.reject(response);\r\n        }\r\n      }\r\n    };\r\n  })\r\n\r\n  .run(function ($rootScope, $location, Auth) {\r\n    // Redirect to login if route requires auth and you're not logged in\r\n    $rootScope.$on('$routeChangeStart', function (event, next) {\r\n      Auth.isLoggedInAsync(function(loggedIn) {\r\n        if (next.authenticate && !loggedIn) {\r\n          event.preventDefault();\r\n          $location.path('/login');\r\n        }\r\n      });\r\n    });\r\n  });\r\n"]}